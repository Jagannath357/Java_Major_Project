// import java.util.Scanner;
// import java.util.ArrayList;

// //DeltaEmployee

// interface Employee {
//     void getEmployeeStatus();
// }

// class DeltaEmployee implements Employee {
//     String empid, empname;
//     String panno;
//     String status; // ret, act, res, ter, abs
//     String desg; // hod, manager, analyst, DE Operator
//     String doj, dob;
//     long mobile;
//     String email;
//     String dptid;

//     public void getEmployeeStatus() {
//         System.out.println("Active");
//     }

// }

// class RetiredEmployee extends DeltaEmployee {
//     float pension, helthBenifete;
// }

// class CurrentEmployee extends DeltaEmployee {
//     float salary, healthBenifit;
// }

// class Department {
//     String deptid;
//     String deptname;
//     String location;
//     String headOfDept;

// }

// class EmployeeHandler {
//     void listAllEmployees() {
//         ArrayList<DeltaEmployee> ae = new ArrayList<>();
//         System.out.println("All Employees are : ");
//     }

//     void listCurrentEmployees() {
//         ArrayList<DeltaEmployee> ce = new ArrayList<>();
//         System.out.println("All Employees are : ");
//     }

//     void listRetiredEmployees() {
//         ArrayList<DeltaEmployee> re = new ArrayList<>();
//         System.out.println("All Employees are : ");
//     }

//     void listAllDepartments() {
//         System.out.println("All Departments");
//     }

//     void addNewEmployee() {
//         System.out.println("All Departments");
//     }

//     void editEmployee() {
//         System.out.println("All Departments");
//     }

//     void terminateEmployee() {
//         System.out.println("All Departments");
//     }

//     void displayHighestEmployees() {
//         System.out.println("All Departments");
//     }

//     void displayEmployeeJoinedLastTwoYear() {
//         System.out.println("All Departments");
//     }

//     void displayEmployeesWithSameName() {
//         System.out.println("All Departments");
//     }

//     void displayEmployeesInEachDepartment() {
//         System.out.println("All Departments");
//     }

//     void displaySalaryOfHod() {
//         System.out.println("All Departments");
//     }

//     void displayOfficialLocationOfEmployee() {
//         System.out.println("All Departments");
//     }

//     void displayQualificationDetailsOfEmployee() {
//         System.out.println("All Departments");
//     }

//     void refreshDigitalSignature() {
//         System.out.println("All Departments");
//     }
// }

// class Exception {

// }

// class EmpNotFound extends Exception {

// }

// class DeptNotFound extends Exception {

// }

// public class Utility {
//     public static void main(String[] args) {

//         Scanner sc = new Scanner(System.in);
//         EmployeeHandler eh = new EmployeeHandler();
//         String choiceContinue;
//         while (true) {
//             System.out.println("Enter 'y' to Continue or 'n' Quit");
//             choiceContinue = sc.nextLine();
//             if (choiceContinue == "n") {
//                 break;
//             }
//             int choice;
//             do {
//                 System.out.println("/Menu");
//                 System.out.println("/1. List of All Employees");
//                 System.out.println("/2. List of All current Employees");
//                 System.out.println("/3. List of All Retired Employees");
//                 System.out.println("/4. List of All Departments width names");
//                 System.out.println("/5. Add a new Employee");
//                 System.out.println("/6. Edit Existing Employee or Department");
//                 System.out.println("/7. Terminate Employee or Delete Department");
//                 System.out.println("/8. Display the top 3 highest paid Employees with their Salaries");
//                 System.out.println("/9. Employees joined in the last two years");
//                 System.out.println("/10. Search for the Employees with same name");
//                 System.out.println("/11. List how many Employees work in each Department");
//                 System.out.println("/12. Salary of the Department Head in a given Department");
//                 System.out.println("/13. Official Location of the Employee");
//                 System.out.println("/14. Display qualification details of a given employee");
//                 System.out.println("/15. Refresh Digital Signature");
//                 System.out.println("/16. Exit");

//                 System.out.println("\n Enter your choice : ");
//                 choice = sc.nextInt();

//                 if (choice < 1 || choice > 16) {
//                     System.out.println("\nInvalid Choice\n Please Enter a valid Choice");
//                 }

//             } while (choice < 1 || choice > 16);

//             switch (choice) {
//                 case 1:
//                     eh.listAllEmployees();
//                     break;
//                 case 2:
//                     eh.listCurrentEmployees();
//                     break;
//                 case 3:
//                     eh.listRetiredEmployees();
//                     break;
//                 case 4:
//                     eh.listAllDepartments();
//                     break;
//                 case 5:
//                     eh.addNewEmployee();
//                     break;
//                 case 6:
//                     eh.editEmployee();
//                     break;
//                 case 7:
//                     eh.terminateEmployee();
//                     break;
//                 case 8:
//                     eh.displayHighestEmployees();
//                     break;
//                 case 9:
//                     eh.displayEmployeeJoinedLastTwoYear();
//                     break;
//                 case 10:
//                     eh.displayEmployeesWithSameName();
//                     break;
//                 case 11:
//                     eh.displayEmployeesInEachDepartment();
//                     break;
//                 case 12:
//                     eh.displaySalaryOfHod();
//                     break;
//                 case 13:
//                     eh.displayOfficialLocationOfEmployee();
//                     break;
//                 case 14:
//                     eh.displayQualificationDetailsOfEmployee();
//                     break;
//                 case 15:
//                     eh.refreshDigitalSignature();
//                     break;

//             }
//         }
//     }
// }














import java.util.Scanner;
import java.util.ArrayList;

//DeltaEmployee

interface Employee {
    void getEmployeeStatus();
}
class DeltaEmployee implements Employee{
    String empid, empname;
    String panno;
    String status;  //ret, act, res, ter, abs
    String desg;    //hod, manager, analyst, DE Operator
    String doj, dob;
    long mobile;
    String email;
    String dptid;
    public void getEmployeeStatus(){
        System.out.println(status);
    }
    ArrayList<DeltaEmployee> ae = new ArrayList<>();
}
class RetiredEmployee extends DeltaEmployee{
    float pension, healthBenifete;
    ArrayList<RetiredEmployee> re = new ArrayList<>();
    
    void showEmployeeDetails() {
        System.out.println("\nDetails of " + this.empname + " Employee");
        System.out.println(this.empname);
        System.out.println(this.empid);
        System.out.println(this.email);
        System.out.println(this.desg);
        System.out.println(this.dob);
        System.out.println(this.doj);
        System.out.println(this.status);
        System.out.println(this.dptid);
        System.out.println(this.mobile);
        System.out.println(this.panno);
        System.out.println(this.pension);
        System.out.println(this.healthBenifete);
    }
}

class CurrentEmployee extends DeltaEmployee {
    float salary, healthBenifete;
    ArrayList<CurrentEmployee> ce = new ArrayList<>();
    
    void showEmployeeDetails() {
        System.out.println("\nDetails of "+this.empname+" Employee");
        System.out.println(this.empname);
        System.out.println(this.empid);
        System.out.println(this.email);
        System.out.println(this.desg);
        System.out.println(this.dob);
        System.out.println(this.doj);
        System.out.println(this.status);
        System.out.println(this.dptid);
        System.out.println(this.mobile);
        System.out.println(this.panno);
        System.out.println(this.salary);
        System.out.println(this.healthBenifete);

    }
}
class Department {
    String deptid;
    String deptname;
    String location;
    String headOfDept;

    ArrayList<Department> dl = new ArrayList<>();
}
class EmployeeHandler {
    Scanner sc = new Scanner(System.in);
    DeltaEmployee e = new DeltaEmployee();
    CurrentEmployee c = new CurrentEmployee();
    RetiredEmployee r = new RetiredEmployee();
    Department d = new Department();

    
    
    

    void listAllEmployees(){
        
        if (e.ae.isEmpty()) {
            System.out.println("\nNo Employee added Yet");
            return;
        }
        System.out.println("\nAll Employees are : ");
        for (DeltaEmployee deltaEmployee : e.ae) {
            System.out.println(deltaEmployee.empname);
        }
    }
    
    void listCurrentEmployees() {
        
        if (c.ce.isEmpty()) {
            System.out.println("There is no Current Employees");
            return;
        }
        System.out.println("All Current Employees are : ");
        for (CurrentEmployee currentEmployee : c.ce) {
            System.out.println(currentEmployee.empname);
        }
    }
    
    void listRetiredEmployees() {
        
        if (r.re.isEmpty()) {
            System.out.println("There is no Retired Employees");
            return;
        }
        System.out.println("All Retired Employees are : ");
        for (RetiredEmployee retiredEmployee : r.re) {
            System.out.println(retiredEmployee.empname);
        }
    }
    
    void listAllDepartments() {
        if (d.dl.isEmpty()) {
            System.out.println("There is no Department added Yet!");
            return;
        }
        System.out.println("All Departments are : ");
        for (Department department : d.dl) {
            System.out.println(department.deptname);
        }
    }
    void addNewEmployee(){

        System.out.println("All Departments");
    }
    
    void editEmployee() {
        System.out.println("All Departments");
    }
    
    void terminateEmployee() {
        System.out.println("'E' for Employ and 'D' for Department");
        System.out.println("Enter your choice");
        String choice = sc.nextLine();

        if (choice.toUpperCase() == "E") {
            System.out.println("Enter Employee Id");
            String eid = sc.nextLine();
            CurrentEmployee tr;
            for (CurrentEmployee currEmployee : c.ce) {
                if (currEmployee.empid == eid) {
                    tr = currEmployee;
                    System.out.println(tr.empid + " is successfully Terminated");
                    c.ce.remove(tr);
                    return;
                }
            }
            System.out.println("Employ doesn't exist!");
        }
        else if (choice.toUpperCase() == "D") {
            System.out.println("Enter Department Id");
            String did = sc.nextLine();
            Department trd;
            for (Department department : d.dl) {
                if (department.deptid == did) {
                    trd = department;
                    System.out.println(trd.deptid + " is successfully Deleted");
                    e.ae.remove(trd);
                    return;
                }
            }
            System.out.println("Department doesn't exist!");
        }
    }
    
    void displayHighestEmployees() {
        System.out.println("All Departments");
        CurrentEmployee hightest1, hightest2, hightest3;
        hightest1.salary = 0.0f;
        hightest2.salary = 0.0f;
        hightest3.salary = 0.0f;
        for (int i = 0; i < c.ce.size(); i++) {
            
            if (c.ce.get(i).salary > hightest1.salary) {
                hightest3  = hightest2;
                hightest2 = hightest1;
                hightest1 = c.ce.get(i);
            }
        }
        System.out.println("\nTop 3 highest paid Employees are:");
        hightest1.showEmployeeDetails();
        hightest2.showEmployeeDetails();
        hightest3.showEmployeeDetails();
    }
    
    void displayEmployeeJoinedLastTwoYear() {
        System.out.println("All Departments");
    }
    
    void displayEmployeesWithSameName() {
        System.out.println("All Departments");
    }

    void displayEmployeesInEachDepartment() {
        System.out.println("All Departments");
    }
    
    void displaySalaryOfHod() {
        System.out.println("All Departments");
    }
    
    void displayOfficialLocationOfEmployee() {
        System.out.println("All Departments");
    }
    
    void displayQualificationDetailsOfEmployee() {
        System.out.println("All Departments");
    }
    
    void refreshDigitalSignature() {
        System.out.println("All Departments");
    }
}
class Exception {

}
class EmpNotFound extends Exception{
    
}

class DeptNotFound extends Exception{

}
public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        EmployeeHandler eh = new EmployeeHandler();
        String choiceContinue;
        while (true) {
            System.out.println("Enter 'y' to Continue or 'n' Quit");
            choiceContinue = sc.nextLine();
            if (choiceContinue == "n") {
                break;
            }
            int choice;
            do {
                System.out.println("/Menu");
                System.out.println("/1. List of All Employees");
                System.out.println("/2. List of All current Employees");
                System.out.println("/3. List of All Retired Employees");
                System.out.println("/4. List of All Departments width names");
                System.out.println("/5. Add a new Employee");
                System.out.println("/6. Edit Existing Employee or Department");
                System.out.println("/7. Terminate Employee or Delete Department");
                System.out.println("/8. Display the top 3 highest paid Employees with their Salaries");
                System.out.println("/9. Employees joined in the last two years");
                System.out.println("/10. Search for the Employees with same name");
                System.out.println("/11. List how many Employees work in each Department");
                System.out.println("/12. Salary of the Department Head in a given Department");
                System.out.println("/13. Official Location of the Employee");
                System.out.println("/14. Display qualification details of a given employee");
                System.out.println("/15. Refresh Digital Signature");
                System.out.println("/16. Exit");

                System.out.println("\n Enter your choice : ");
                choice = sc.nextInt();

                if (choice<1 || choice>16) {
                    System.out.println("\nInvalid Choice\n Please Enter a valid Choice");
                }
            
            }while (choice<1 || choice>16);

            switch (choice) {
                case 1:
                    eh.listAllEmployees();
                    break;
                case 2:
                    eh.listCurrentEmployees();
                    break;
                case 3:
                    eh.listRetiredEmployees();
                    break;
                case 4:
                    eh.listAllDepartments();
                    break;
                case 5:
                    eh.addNewEmployee();
                    break;
                case 6:
                    eh.editEmployee();
                    break;
                case 7:
                    eh.terminateEmployee();
                    break;
                case 8:
                    eh.displayHighestEmployees();
                    break;
                case 9:
                    eh.displayEmployeeJoinedLastTwoYear();
                    break;
                case 10:
                    eh.displayEmployeesWithSameName();
                    break;
                case 11:
                    eh.displayEmployeesInEachDepartment();
                    break;
                case 12:
                    eh.displaySalaryOfHod();
                    break;
                case 13:
                    eh.displayOfficialLocationOfEmployee();
                    break;
                case 14:
                    eh.displayQualificationDetailsOfEmployee();
                    break;
                case 15:
                    eh.refreshDigitalSignature();
                    break;
                
            }
        }
    }
}
